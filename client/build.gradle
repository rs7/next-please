import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import org.apache.commons.io.FileUtils
import org.apache.commons.lang.StringEscapeUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '1.3.0'
    }
}

apply plugin: 'gradlefx'
apply plugin: 'ideafx'

repositories {
    maven {
        credentials {
            username bitbucketLogin
            password bitbucketPassword
        }
        url 'https://api.bitbucket.org/1.0/repositories/rs7/next-please-repo/raw/master/'
    }
}

configurations {
    playerglobal
}

ext {
    swfVersion = '16.0'
}

dependencies {
    internal name: 'robotlegs-framework', version: '2.2.1', group: 'robotlegs', ext: 'swc'
    playerglobal name: 'playerglobal', version: swfVersion, group: 'com.adobe.flex.framework', ext: 'swc'
}

flexHome = flexSDKPath
flexSdkName = Paths.get(flexSDKPath).fileName
frameworkLinkage = 'merged'
mainClass = 'rs7.nextPlease.Main'
output = 'next-please-gradle'
playerVersion = swfVersion
resourceDirs = []
srcDirs = ['/src']
testDirs = []
testResourceDirs = []
type = 'swf'

additionalCompilerOptions = [
  "-target-player=$swfVersion",
]

task playerglobal

compileFlex.dependsOn(playerglobal)

/*
Передача компилятору playerglobal.swc

Для чего:
Это сделано для возможности безболезненной смены swfVersion

Как это работает:
Достаём файл playerglobal.swc из разрешённых зависимостей типа playerglobal
Помещает его в созданную для этого временную директорию (в стандартном для системы месте) по шаблону $tempDir/$swfVersion/playerglobal.swc
 Это соответствует шаблону ({playerglobalHome}/{targetPlayerMajorVersion}.{targetPlayerMinorVersion}/playerglobal.swc) заданному в стандартном конфигурационном файле компилятора (flex-config.xml) Flex SDK
Ищем файл задания переменных окружения (env.properties) в директории Flex SDK. Если он есть, то переименовываем в env.properties.origin
Заменяем файл env.properties новым содержимым env.PLAYERGLOBAL_HOME=$tempDir
 Это устанавливает значение токена {playerglobalHome} в конфигурационном файле
Компилируем проект
Восстанавливаем env.properties в оригинальное состояние из env.properties.origin
Удаляем временную директорию

Почему сделано именно так:
- Имя файла playerglobal.swc нельзя менять, иначе компилятор его не подхватывает
- Имя файла внутри локального gradle-репозитория изменить нельзя и оно отлично от оригинального (playerglobal.swc)
- Задать переменную окружения из gradle нельзя (PLAYERGLOBAL_HOME не исключение)
- Если не устанавливать переменную окружения PLAYERGLOBAL_HOME, компилятор не находит playerglobal.swc, даже если он расположен по стандартному пути libs/player (это касается Apache Flex SDK последних версий)
*/
playerglobal << {
    def playerglobalHome = Files.createTempDirectory('gradle-playerglobal.')

    configurations.playerglobal.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        project.copy {
            from artifact.file
            into playerglobalHome.resolve(artifact.moduleVersion.id.version).toFile()
            rename { String fileName -> fileName = 'playerglobal.swc' }
        }
    }

    def envDir = Paths.get(flexSDKPath)

    def envFileName = 'env.properties';
    def envFile = envDir.resolve(envFileName)

    if (Files.exists(envFile)) {
        def envBakFileName = "${envFileName}.origin";
        def envBakFile = envDir.resolve(envBakFileName)

        Files.move(envFile, envBakFile, StandardCopyOption.REPLACE_EXISTING)

        compileFlex.doLast {
            Files.move(envBakFile, envFile, StandardCopyOption.REPLACE_EXISTING)
            FileUtils.deleteDirectory(playerglobalHome.toFile())
        }
    }

    envFile.text = "env.PLAYERGLOBAL_HOME=" + StringEscapeUtils.escapeJava(playerglobalHome.absolutePath)
}